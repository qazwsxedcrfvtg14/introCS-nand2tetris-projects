{obj i=glo["tmp_obj0"],j=glo["tmp_obj1"];
Func(Output_Clean)
    j=ScreenBuffer;
    Loop
        mem[j]=0;
        j++;
        If(j,==,ScreenBuffer+0x2000)
            Break;
        End
    End
End
Func(Output_Update)
    Global["gray"]++;
    Return(0);
    i=0x4000;
    j=ScreenBuffer;
    Loop
        mem[i]=mem[j];
        j++;
        i++;
        If(i,==,0x6000)
            Break;
        End
    End
End
{obj x1_high=glo["tmp_obj2"],x1_low=glo["tmp_obj3"],x2_high=glo["tmp_obj4"],x2_low=glo["tmp_obj5"],pos=glo["tmp_obj6"],line_begin=glo["tmp_obj7"],bi=glo["tmp_obj8"];
obj y11=glo["tmp_obj9"],y22=glo["tmp_obj10"],gry=glo["tmp_obj11"];
Func(Output_DrawRect,x1,x2,y1,y2,col)
    y11=y1;
    y22=y2;
    If(x1,>,x2)
        Return(0);
    End
    If(y11,>,y22)
        Return(0);
    End
    x1_low=x1;
    x1_low&=15;
    x1_low+=16;
    x1_low=Mem[x1_low];
    x1_high=x1;
    x1_high&=-16;
    x1_high+=48;
    x1_high=Mem[x1_high];
    x2_low=x2;
    x2_low&=15;
    x2_low+=32;
    x2_low=Mem[x2_low];
    x2_high=x2;
    x2_high&=-16;
    x2_high+=48;
    x2_high=Mem[x2_high];
    If(x1_high,==,x2_high)
        x1_low&=x2_low;
        x2_low=x1_low;
    End
    If(col,==,0)
        x1_low.nt();
        x2_low.nt();
    End
    Var y32;
    line_begin=ScreenBuffer;
    y32=y1;
    y32+=y32;//2
    y32+=y32;//4
    y32+=y32;//8
    y32+=y32;//16
    y32+=y32;//32
    line_begin+=y32;
    Loop
        bi=y11;
        bi+=Global["gray"];
        bi&=1;
        gry=Output::Gray_Mask;
        gry+=bi;
        If(col,==,2)
            pos=line_begin;
            pos+=x2_high;
            mem[pos]|=x2_low;
            mem[pos]&=mem[gry];
            pos=line_begin;
            pos+=x1_high;
            mem[pos]|=x1_low;
            mem[pos]&=mem[gry];
            i=x1_high;
            Loop
                pos++;
                i++;
                If(i,>=,x2_high)
                    Break
                End
                mem[pos]|=mem[gry];
            End
        End
        If(col,==,1)
            pos=line_begin;
            pos+=x2_high;
            mem[pos]|=x2_low;
            pos=line_begin;
            pos+=x1_high;
            mem[pos]|=x1_low;
            i=x1_high;
            Loop
                pos++;
                i++;
                If(i,>=,x2_high)
                    Break
                End
                mem[pos]|=-1;
            End
        End
        If(col,==,0)
            pos=line_begin;
            pos+=x2_high;
            mem[pos]&=x2_low;
            pos=line_begin;
            pos+=x1_high;
            mem[pos]&=x1_low;
            i=x1_high;
            Loop
                pos++;
                i++;
                If(i,>=,x2_high)
                    Break
                End
                mem[pos]=0;
            End
        End
        line_begin+=32;
        y11++;
        If(y11,>,y22)
            Break
        End
    End
End
}}
Func(Output_DrawVerticalLine,x,y1,y2)
    Call(Output_DrawRect,x,x,y1,y2,0);
End
Func(Output_DrawNumber,n,x,y)
    Var pos;
    pos=0x0600;
    pos+=n;
    pos=mem[pos];
    Loop
        Var a,b,c;
        a=mem[pos];
        If(a,==,-1)
            Break;
        End
        pos++;
        b=mem[pos];
        pos++;
        c=mem[pos];
        pos++;
        a+=x;
        b+=y;
        c+=y;
        Call(Output_DrawVerticalLine,a,b,c);
    End
End
Func(Input_WaitEnter)
    Loop
        If(mem[KBD],==,128)
            Break
        End
    End
End
Func(Output_Init)
    for(int i=0;i<16;i++)
        Mem[i+16]=-(1<<i);
    //Mem[32]=-1;
    for(int i=0;i<15;i++)
        Mem[i+32]=(1<<i+1)-1;
    Mem[47]=-1;
    for(int i=0;i<32;i++)
        Mem[(i<<4)+48]=i;
    mem[Output::Gray_Mask]=21845;
    mem[Output::Gray_Mask+1]=-21846;
    mem[1536]=1552;
    mem[1552]=6;mem[1553]=16;mem[1554]=22;
    mem[1555]=7;mem[1556]=13;mem[1557]=22;
    mem[1558]=8;mem[1559]=11;mem[1560]=23;
    mem[1561]=9;mem[1562]=9;mem[1563]=15;
    mem[1564]=9;mem[1565]=22;mem[1566]=23;
    mem[1567]=10;mem[1568]=7;mem[1569]=12;
    mem[1570]=10;mem[1571]=22;mem[1572]=23;
    mem[1573]=11;mem[1574]=5;mem[1575]=9;
    mem[1576]=11;mem[1577]=21;mem[1578]=22;
    mem[1579]=12;mem[1580]=5;mem[1581]=7;
    mem[1582]=12;mem[1583]=20;mem[1584]=22;
    mem[1585]=13;mem[1586]=5;mem[1587]=6;
    mem[1588]=13;mem[1589]=18;mem[1590]=21;
    mem[1591]=14;mem[1592]=5;mem[1593]=6;
    mem[1594]=14;mem[1595]=16;mem[1596]=20;
    mem[1597]=15;mem[1598]=5;mem[1599]=6;
    mem[1600]=15;mem[1601]=14;mem[1602]=19;
    mem[1603]=16;mem[1604]=5;mem[1605]=6;
    mem[1606]=16;mem[1607]=11;mem[1608]=17;
    mem[1609]=17;mem[1610]=5;mem[1611]=15;
    mem[1612]=18;mem[1613]=5;mem[1614]=13;
    mem[1615]=19;mem[1616]=7;mem[1617]=10;
    mem[1618]=-1;
    mem[1537]=1619;
    mem[1619]=9;mem[1620]=22;mem[1621]=23;
    mem[1622]=10;mem[1623]=18;mem[1624]=23;
    mem[1625]=11;mem[1626]=14;mem[1627]=23;
    mem[1628]=12;mem[1629]=9;mem[1630]=23;
    mem[1631]=13;mem[1632]=5;mem[1633]=17;
    mem[1634]=14;mem[1635]=4;mem[1636]=12;
    mem[1637]=15;mem[1638]=4;mem[1639]=8;
    mem[1640]=-1;
    mem[1538]=1641;
    mem[1641]=5;mem[1642]=7;mem[1643]=8;
    mem[1644]=6;mem[1645]=7;mem[1646]=8;
    mem[1647]=7;mem[1648]=6;mem[1649]=8;
    mem[1650]=7;mem[1651]=19;mem[1652]=23;
    mem[1653]=8;mem[1654]=5;mem[1655]=8;
    mem[1656]=8;mem[1657]=17;mem[1658]=23;
    mem[1659]=9;mem[1660]=5;mem[1661]=6;
    mem[1662]=9;mem[1663]=15;mem[1664]=23;
    mem[1665]=10;mem[1666]=5;mem[1667]=5;
    mem[1668]=10;mem[1669]=13;mem[1670]=18;
    mem[1671]=10;mem[1672]=22;mem[1673]=23;
    mem[1674]=11;mem[1675]=4;mem[1676]=5;
    mem[1677]=11;mem[1678]=11;mem[1679]=16;
    mem[1680]=11;mem[1681]=22;mem[1682]=23;
    mem[1683]=12;mem[1684]=4;mem[1685]=5;
    mem[1686]=12;mem[1687]=9;mem[1688]=14;
    mem[1689]=12;mem[1690]=22;mem[1691]=22;
    mem[1692]=13;mem[1693]=4;mem[1694]=12;
    mem[1695]=13;mem[1696]=21;mem[1697]=22;
    mem[1698]=14;mem[1699]=5;mem[1700]=10;
    mem[1701]=14;mem[1702]=21;mem[1703]=22;
    mem[1704]=15;mem[1705]=5;mem[1706]=8;
    mem[1707]=15;mem[1708]=21;mem[1709]=21;
    mem[1710]=16;mem[1711]=20;mem[1712]=21;
    mem[1713]=17;mem[1714]=20;mem[1715]=21;
    mem[1716]=-1;
    mem[1539]=1717;
    mem[1717]=4;mem[1718]=6;mem[1719]=6;
    mem[1720]=5;mem[1721]=6;mem[1722]=6;
    mem[1723]=6;mem[1724]=5;mem[1725]=6;
    mem[1726]=7;mem[1727]=5;mem[1728]=6;
    mem[1729]=7;mem[1730]=13;mem[1731]=13;
    mem[1732]=8;mem[1733]=5;mem[1734]=6;
    mem[1735]=8;mem[1736]=11;mem[1737]=13;
    mem[1738]=9;mem[1739]=4;mem[1740]=5;
    mem[1741]=9;mem[1742]=9;mem[1743]=14;
    mem[1744]=9;mem[1745]=22;mem[1746]=23;
    mem[1747]=10;mem[1748]=4;mem[1749]=5;
    mem[1750]=10;mem[1751]=7;mem[1752]=14;
    mem[1753]=10;mem[1754]=22;mem[1755]=23;
    mem[1756]=11;mem[1757]=4;mem[1758]=10;
    mem[1759]=11;mem[1760]=13;mem[1761]=14;
    mem[1762]=11;mem[1763]=20;mem[1764]=23;
    mem[1765]=12;mem[1766]=4;mem[1767]=8;
    mem[1768]=12;mem[1769]=13;mem[1770]=13;
    mem[1771]=12;mem[1772]=19;mem[1773]=22;
    mem[1774]=13;mem[1775]=5;mem[1776]=6;
    mem[1777]=13;mem[1778]=13;mem[1779]=14;
    mem[1780]=13;mem[1781]=17;mem[1782]=21;
    mem[1783]=14;mem[1784]=13;mem[1785]=20;
    mem[1786]=15;mem[1787]=13;mem[1788]=18;
    mem[1789]=16;mem[1790]=14;mem[1791]=16;
    mem[1792]=-1;
    mem[1540]=1793;
    mem[1793]=4;mem[1794]=16;mem[1795]=19;
    mem[1796]=5;mem[1797]=13;mem[1798]=19;
    mem[1799]=6;mem[1800]=11;mem[1801]=19;
    mem[1802]=7;mem[1803]=8;mem[1804]=14;
    mem[1805]=7;mem[1806]=19;mem[1807]=19;
    mem[1808]=7;mem[1809]=22;mem[1810]=23;
    mem[1811]=8;mem[1812]=6;mem[1813]=12;
    mem[1814]=8;mem[1815]=18;mem[1816]=23;
    mem[1817]=9;mem[1818]=6;mem[1819]=9;
    mem[1820]=9;mem[1821]=17;mem[1822]=23;
    mem[1823]=10;mem[1824]=6;mem[1825]=7;
    mem[1826]=10;mem[1827]=14;mem[1828]=21;
    mem[1829]=11;mem[1830]=12;mem[1831]=19;
    mem[1832]=12;mem[1833]=9;mem[1834]=15;
    mem[1835]=12;mem[1836]=17;mem[1837]=18;
    mem[1838]=13;mem[1839]=7;mem[1840]=13;
    mem[1841]=13;mem[1842]=17;mem[1843]=18;
    mem[1844]=14;mem[1845]=5;mem[1846]=10;
    mem[1847]=14;mem[1848]=16;mem[1849]=17;
    mem[1850]=15;mem[1851]=4;mem[1852]=8;
    mem[1853]=15;mem[1854]=16;mem[1855]=17;
    mem[1856]=16;mem[1857]=4;mem[1858]=6;
    mem[1859]=16;mem[1860]=16;mem[1861]=17;
    mem[1862]=-1;
    mem[1541]=1863;
    mem[1863]=5;mem[1864]=22;mem[1865]=22;
    mem[1866]=6;mem[1867]=11;mem[1868]=15;
    mem[1869]=6;mem[1870]=21;mem[1871]=23;
    mem[1872]=7;mem[1873]=9;mem[1874]=16;
    mem[1875]=7;mem[1876]=22;mem[1877]=23;
    mem[1878]=8;mem[1879]=8;mem[1880]=16;
    mem[1881]=8;mem[1882]=22;mem[1883]=23;
    mem[1884]=9;mem[1885]=6;mem[1886]=10;
    mem[1887]=9;mem[1888]=15;mem[1889]=17;
    mem[1890]=9;mem[1891]=22;mem[1892]=23;
    mem[1893]=10;mem[1894]=5;mem[1895]=9;
    mem[1896]=10;mem[1897]=16;mem[1898]=18;
    mem[1899]=10;mem[1900]=21;mem[1901]=23;
    mem[1902]=11;mem[1903]=4;mem[1904]=8;
    mem[1905]=11;mem[1906]=17;mem[1907]=22;
    mem[1908]=12;mem[1909]=4;mem[1910]=8;
    mem[1911]=12;mem[1912]=18;mem[1913]=22;
    mem[1914]=13;mem[1915]=7;mem[1916]=8;
    mem[1917]=13;mem[1918]=19;mem[1919]=21;
    mem[1920]=14;mem[1921]=7;mem[1922]=8;
    mem[1923]=14;mem[1924]=20;mem[1925]=20;
    mem[1926]=15;mem[1927]=6;mem[1928]=7;
    mem[1929]=16;mem[1930]=6;mem[1931]=7;
    mem[1932]=17;mem[1933]=6;mem[1934]=7;
    mem[1935]=18;mem[1936]=6;mem[1937]=7;
    mem[1938]=-1;
    mem[1542]=1939;
    mem[1939]=4;mem[1940]=19;mem[1941]=21;
    mem[1942]=5;mem[1943]=16;mem[1944]=22;
    mem[1945]=6;mem[1946]=14;mem[1947]=23;
    mem[1948]=7;mem[1949]=12;mem[1950]=18;
    mem[1951]=7;mem[1952]=22;mem[1953]=23;
    mem[1954]=8;mem[1955]=11;mem[1956]=15;
    mem[1957]=8;mem[1958]=23;mem[1959]=23;
    mem[1960]=9;mem[1961]=9;mem[1962]=13;
    mem[1963]=9;mem[1964]=15;mem[1965]=16;
    mem[1966]=9;mem[1967]=22;mem[1968]=23;
    mem[1969]=10;mem[1970]=7;mem[1971]=11;
    mem[1972]=10;mem[1973]=14;mem[1974]=16;
    mem[1975]=10;mem[1976]=22;mem[1977]=23;
    mem[1978]=11;mem[1979]=6;mem[1980]=10;
    mem[1981]=11;mem[1982]=14;mem[1983]=15;
    mem[1984]=11;mem[1985]=21;mem[1986]=22;
    mem[1987]=12;mem[1988]=5;mem[1989]=8;
    mem[1990]=12;mem[1991]=14;mem[1992]=15;
    mem[1993]=12;mem[1994]=20;mem[1995]=22;
    mem[1996]=13;mem[1997]=4;mem[1998]=7;
    mem[1999]=13;mem[2000]=14;mem[2001]=15;
    mem[2002]=13;mem[2003]=19;mem[2004]=21;
    mem[2005]=14;mem[2006]=4;mem[2007]=5;
    mem[2008]=14;mem[2009]=14;mem[2010]=21;
    mem[2011]=15;mem[2012]=14;mem[2013]=20;
    mem[2014]=16;mem[2015]=15;mem[2016]=19;
    mem[2017]=-1;
    mem[1543]=2018;
    mem[2018]=4;mem[2019]=11;mem[2020]=12;
    mem[2021]=5;mem[2022]=10;mem[2023]=12;
    mem[2024]=6;mem[2025]=8;mem[2026]=11;
    mem[2027]=7;mem[2028]=6;mem[2029]=10;
    mem[2030]=7;mem[2031]=21;mem[2032]=23;
    mem[2033]=8;mem[2034]=5;mem[2035]=9;
    mem[2036]=8;mem[2037]=19;mem[2038]=23;
    mem[2039]=9;mem[2040]=4;mem[2041]=7;
    mem[2042]=9;mem[2043]=16;mem[2044]=23;
    mem[2045]=10;mem[2046]=4;mem[2047]=6;
    mem[2048]=10;mem[2049]=14;mem[2050]=20;
    mem[2051]=11;mem[2052]=5;mem[2053]=6;
    mem[2054]=11;mem[2055]=12;mem[2056]=18;
    mem[2057]=12;mem[2058]=5;mem[2059]=6;
    mem[2060]=12;mem[2061]=10;mem[2062]=15;
    mem[2063]=13;mem[2064]=5;mem[2065]=5;
    mem[2066]=13;mem[2067]=8;mem[2068]=13;
    mem[2069]=14;mem[2070]=5;mem[2071]=11;
    mem[2072]=15;mem[2073]=5;mem[2074]=9;
    mem[2075]=16;mem[2076]=5;mem[2077]=7;
    mem[2078]=17;mem[2079]=5;mem[2080]=5;
    mem[2081]=-1;
    mem[1544]=2082;
    mem[2082]=4;mem[2083]=17;mem[2084]=22;
    mem[2085]=5;mem[2086]=7;mem[2087]=8;
    mem[2088]=5;mem[2089]=15;mem[2090]=23;
    mem[2091]=6;mem[2092]=6;mem[2093]=10;
    mem[2094]=6;mem[2095]=14;mem[2096]=23;
    mem[2097]=7;mem[2098]=5;mem[2099]=17;
    mem[2100]=7;mem[2101]=22;mem[2102]=23;
    mem[2103]=8;mem[2104]=5;mem[2105]=6;
    mem[2106]=8;mem[2107]=9;mem[2108]=15;
    mem[2109]=8;mem[2110]=22;mem[2111]=23;
    mem[2112]=9;mem[2113]=4;mem[2114]=5;
    mem[2115]=9;mem[2116]=11;mem[2117]=16;
    mem[2118]=9;mem[2119]=21;mem[2120]=23;
    mem[2121]=10;mem[2122]=4;mem[2123]=5;
    mem[2124]=10;mem[2125]=11;mem[2126]=23;
    mem[2127]=11;mem[2128]=4;mem[2129]=5;
    mem[2130]=11;mem[2131]=7;mem[2132]=12;
    mem[2133]=11;mem[2134]=15;mem[2135]=22;
    mem[2136]=12;mem[2137]=4;mem[2138]=11;
    mem[2139]=12;mem[2140]=17;mem[2141]=21;
    mem[2142]=13;mem[2143]=5;mem[2144]=10;
    mem[2145]=14;mem[2146]=5;mem[2147]=10;
    mem[2148]=15;mem[2149]=8;mem[2150]=9;
    mem[2151]=16;mem[2152]=8;mem[2153]=9;
    mem[2154]=17;mem[2155]=8;mem[2156]=8;
    mem[2157]=-1;
    mem[1545]=2158;
    mem[2158]=4;mem[2159]=12;mem[2160]=15;
    mem[2161]=5;mem[2162]=11;mem[2163]=16;
    mem[2164]=6;mem[2165]=10;mem[2166]=16;
    mem[2167]=7;mem[2168]=9;mem[2169]=12;
    mem[2170]=7;mem[2171]=15;mem[2172]=16;
    mem[2173]=8;mem[2174]=8;mem[2175]=10;
    mem[2176]=8;mem[2177]=15;mem[2178]=16;
    mem[2179]=8;mem[2180]=22;mem[2181]=24;
    mem[2182]=9;mem[2183]=7;mem[2184]=9;
    mem[2185]=9;mem[2186]=15;mem[2187]=16;
    mem[2188]=9;mem[2189]=19;mem[2190]=24;
    mem[2191]=10;mem[2192]=6;mem[2193]=8;
    mem[2194]=10;mem[2195]=14;mem[2196]=15;
    mem[2197]=10;mem[2198]=17;mem[2199]=24;
    mem[2200]=11;mem[2201]=6;mem[2202]=8;
    mem[2203]=11;mem[2204]=13;mem[2205]=22;
    mem[2206]=12;mem[2207]=5;mem[2208]=7;
    mem[2209]=12;mem[2210]=12;mem[2211]=19;
    mem[2212]=13;mem[2213]=5;mem[2214]=6;
    mem[2215]=13;mem[2216]=11;mem[2217]=16;
    mem[2218]=14;mem[2219]=5;mem[2220]=14;
    mem[2221]=15;mem[2222]=6;mem[2223]=12;
    mem[2224]=16;mem[2225]=7;mem[2226]=11;
    mem[2227]=17;mem[2228]=11;mem[2229]=11;
    mem[2230]=-1;
End
{obj pos=glo["tmp_obj0"],val=glo["tmp_obj1"],tmp=glo["tmp_obj2"],sz=glo["tmp_obj3"],pos2=glo["tmp_obj3"],tmp2=glo["tmp_obj4"];
//const int mask11=-16384;
const int umask11=16383;
const int mask10=-32768;
//const int umask10=32767;
const int mask01=16384;
const int umask01=-16385;
Func(Array_Alloc,size)
    sz=size;
    pos=Array_Pool_Begin;
    Loop
        val=mem[pos];
        tmp=val;
        tmp&=mask10;
        val&=umask11;
        If(tmp,==,0)
            If(val,>=,sz)
                Break
            End
        End
        pos+=val;
        pos++;
    End
    tmp=mem[pos];
    tmp&=mask01;
    tmp2=sz;
    tmp2|=tmp;
    tmp2|=mask10;
    mem[pos]=tmp2;
    pos+=sz;
    pos++;
    val-=sz;
    val--;
    If(val,<,0)
        val=mem[pos];
    End
    val|=mask01;
    mem[pos]=val;
    pos-=sz;
    Return(pos);
End
Func(Array_Free,p)
    p--;
    pos=p;
    val=mem[pos];
    tmp=val;
    tmp&=mask01;
    val&=umask11;
    If(tmp,==,0)
        pos--;
        pos=mem[pos];
    End
    pos2=p;
    Loop
        pos2+=val;
        pos2++;
        val=mem[pos2];
        tmp=val;
        tmp&=mask10;
        val&=umask11;
        If(tmp,!=,0)
            Break
        End
    End
    val=pos2;
    val-=pos;
    val--;
    tmp=mem[pos];
    tmp&=mask01;
    val|=tmp;
    mem[pos]=val;
    mem[pos2]&=umask01;
    pos2--;
    mem[pos2]=pos;
End
}
{obj tmp=glo["tmp_obj0"],tmp2=glo["tmp_obj1"],tmp3=glo["tmp_obj2"],tmp4=glo["tmp_obj3"],tmp5=glo["tmp_obj4"];
Func(Math_Bit,x,n)
    tmp=x;
    tmp&=mem[n];
    If(tmp,!=,0)
        Return(1);
    End
    Return(0);
End
Func(Math_TwoToThe,n)
    Return(mem[n]);
End
Func(Math_Abs,x)
    tmp=x;
    If(tmp,>=,0)
        Return(tmp);
    End
    tmp*=-1;
    Return(tmp);
End
Func(Math_LeftShift,x,y)
    tmp=0;
    tmp2=x;
    Loop
        If(tmp,>=,y)
            Break
        End
        tmp2+=tmp2;
    End
    Return(tmp2);
End
Func(Math_Lowbit,x)
    tmp=x;
    tmp2=x;
    tmp2*=-1;
    tmp&=tmp2;
    Return(tmp);
End
Func(Math_Xor,x,y)
    tmp=x;
    tmp2=y;
    tmp2.nt();
    tmp3=tmp;
    tmp3&=tmp2;
    tmp.nt();
    tmp2.nt();
    tmp&=tmp2;
    tmp|=tmp3;
    Return(tmp);
End
Func(Math_Multiply,x,y)
    tmp=0;
    tmp2=x;
    tmp3=y;
    tmp4=0;
    Loop
        If(tmp4,==,16)
            Break
        End
        tmp5=y;
        tmp5&=mem[tmp4];
        If(tmp5,!=,0)
            tmp+=tmp2;
        End
        tmp2+=tmp2;
        tmp4++;
    End
    Return(tmp);
End
Func(Math_Divide,x,y)
    Var z;
    z=0;
    If(x,<,0)
        z+=1;
        x*=-1;
    End
    If(y,<,0)
        z-=1;
        y*=-1;
    End
    If(y,>,x)
        Return(0);
    End
    Var w,res;
    w=y;
    w+=y;
    res=Math::Divide(x,w);
    w=Math::Multiply(w,res);
    w+=y;
    res+=res;
    If(x,>=,w)
        res++;
    End
    If(z,!=,0)
        res*=-1;
    End
    Return(res);
End
Func(Math_Mod,x,y)
    Var res;
    res=Math::Divide(x,y);
    res=Math::Multiply(res,y);
    res*=-1;
    res+=x;
    Return(res);
End
Func(Math_Max,x,y)
    If(x,>,y)
        Return(x);
    End
    Return(y);
End
Func(Math_Min,x,y)
    If(x,<,y)
        Return(x);
    End
    Return(y);
End
}
